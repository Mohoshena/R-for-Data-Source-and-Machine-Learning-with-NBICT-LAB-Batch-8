q()
q()
# install.packages("ggplot2")
library(ggplot2)
dataset = mtcars
# Generating a basic scatter plot
ggplot(dataset, aes(x = wt, y = mpg)) +
geom_point()
# Changing the point size and shape
ggplot(dataset, aes(x = wt, y = mpg)) +
geom_point(size=1, shape=18)
# Adding the regression line
ggplot(dataset, aes(x = wt, y = mpg)) +Add commentMore actions
geom_point(size=1, shape=18) +
geom_smooth(method = 1m)
geom_point(size=1, shape=18) +
geom_smooth(method = lm)
geom_smooth(method = lm)
# Removing the confident interval
ggplot(dataset, aes(x=wt, y=mpg)) +
# Removing the confident interval
ggplot(dataset, aes(x=wt, y=mpg)) +
geom_point() +
# Removing the confident interval
ggplot(dataset, aes(x=wt, y=mpg)) +
geom_point() +
geom_smooth(method = lm, se = FALSE)
geom_point() +
geom_smooth(method = lm, se = FALSE)
ggplot(dataset, aes(x=wt, y=mpg)) +
geom_point() +
geom_smooth()
ggplot(dataset, aes(x = wt, y = mpg)) +Add commentMore actions
# Change the line type and color
ggplot(dataset, aes(x = wt, y = mpg)) +Add commentMore actions
# Change the line type and color
ggplot(dataset, aes(x = wt, y = mpg)) +
geom_point(size=1, shape=18) +
geom_smooth(method = lm)
geom_smooth(method = lm, linetype = "dashed",
color="darkblue")
geom_smooth(method = lm, linetype = "dotted",
color="darkblue")
geom_smooth(method = lm, linetype = "dashed",
color="darkred", fill= "blue")
ggplot(dataset, aes(x = wt, y = mpg)) +
geom_point(size=1, shape=18) +
geom_smooth(method = lm)
geom_smooth(method = lm, linetype = "dashed",
color="darkred", fill= "blue")
# Changing the confidence interval color
ggplot(dataset, aes(x = wt, y = mpg)) +
geom_point(size=3, shape=18) +
geom_smooth(method = lm)
# Changing the confidence interval color
ggplot(dataset, aes(x = wt, y = mpg)) +
geom_point(size=3, shape=18, color = blue) +
geom_smooth(method = lm)
# Changing the confidence interval color
ggplot(dataset, aes(x = wt, y = mpg)) +
geom_point(size=3, shape=18, color = "blue") +
geom_smooth(method = lm)
# Adding the regression line
ggplot(dataset, aes(x = wt, y = mpg)) +
geom_point(size=1, shape=18) +
geom_smooth(method = lm)
dataset$cyl = as.factor(dataset$cyl)
dataset$cyl
# Converting the cyl colunm from a numeric to factor variable
dataset$cyl = as.factor(dataset$cyl)
# Changing the point shapes by the levels of cyl
ggplot((dataset, aes(x= wt, y=mpg, shape= cyl))+
# Changing the point shapes by the levels of cyl
ggplot(dataset, aes(x= wt, y=mpg, shape= cyl))+
# Changing the point shapes by the levels of cyl
ggplot(dataset, aes(x= wt, y=mpg, shape= cyl))+
geom_point(cyl)
# Changing the point shapes by the levels of cyl
ggplot(dataset, aes(x= wt, y=mpg, shape= cyl))+
geom_point()
geom_point(size=3, shape=18, color = "blue") +
geom_smooth(method = bm)
geom_point()
# Changing the point shapes by the levels of cyl
ggplot(dataset, aes(x= wt, y=mpg, shape= cyl))+
geom_point()
# Changing the point shapes and colors
ggplot(dataset, aes(x= wt, y=mpg, shape= cyl, color= cyl))+
geom_point()
ggplot(dataset, aes(x= wt, y=mpg, shape= cyl, color= cyl, size=cyl,))+
geom_point()
ggplot(dataset, aes(x= wt, y=mpg, shape= cyl, color= cyl, size=cyl,))+
geom_point()
# The plyr packages is used to calculate
# the
install.packages('plyr')
library(plyr)
# Importing data the dataset
dataset = read.csv("data.csv")
# Importing the library
library(ggplot2)
ggplot(dataset, aes(x=weight))+
geom_histogram("color=white")
group_means=ddply(dataset, "sex", summarize, grp.mean= mean(weight))
setwd("D:/R NBICT/R-for-Data-Source-and-Machine-Learning-with-NBICT-LAB-Batch-8/RDSML-Day-14 Histogram in R (Part-2)")
setwd("D:/R NBICT/R-for-Data-Source-and-Machine-Learning-with-NBICT-LAB-Batch-8/RDSML-Day-14 Histogram in R (Part-2)")
# Importing the dataset
dataset = read.csv("data.csv")
# Importing the library
library(ggplot2)
# Creating the basic histogram
ggplot(dataset, aes(x = weight)) +
geom_histogram(color = "white")
# Changing histogram plot line colors by groups
ggplot(dataset, aes(x = weight, fill = sex)) +
geom_histogram(color = "white", alpha = .5, position = "identity")
# We can change the position adjustment
# to use for overlapping points on the layer.
# Possible values for the argument position are
# "identity", "stack", "dodge". Default value is "stack".
# Interleaved histograms
ggplot(dataset, aes(x = weight, fill = sex)) +
geom_histogram(color = "white", alpha = .5, position = "dodge") +
theme(legend.position = "top")
# The plyr package is used to calculate
# the mean weight of each group.
# install.packages("plyr")
library(plyr)
group_means = ddply(dataset, "sex", summarise, grp.mean = mean(weight))
group_means
# Adding mean lines
myPlot = ggplot(dataset, aes(x = weight, fill = sex)) +
geom_histogram(color = "white", alpha = .5, position = "dodge") +
geom_vline(data = group_means, aes(xintercept = grp.mean, color = sex),
linetype = "dashed") +Add commentMore actions
# Importing data the dataset
dataset = read.csv("data.csv")
# Importing the library
library(ggplot2)
#creating tghe basic histogram
ggplot(dataset, aes(x=weight))+
geom_histogram("color=white")
